SET DB_NAME = 'dev_payments';
SET sh_stage = 'STAGING';
SET Sh_raw = 'raw';
SET sh_mart = 'mart';
CREATE DATABASE IF NOT EXISTS IDENTIFIER($DB_NAME);
CREATE SCHEMA IF NOT EXISTS IDENTIFIER($sh_stage);
USE DATABASE IDENTIFIER($DB_NAME);
USE SCHEMA IDENTIFIER($sh_stage);
CREATE OR REPLACE TABLE PAYMENTS_STAGING
(
    payment_id   STRING,
    user_id      STRING,
    amount       NUMBER(10,2),
    currency     STRING,
    payment_ts   TIMESTAMP_NTZ,
    file_name VARCHAR,
    file_row_number INT,

    EFFECTIVE_START_DATE TIMESTAMP_NTZ DEFAULT TO_TIMESTAMP_NTZ(CURRENT_TIMESTAMP),
    EFFECTIVE_END_DATE TIMESTAMP_NTZ DEFAULT NULL,
    IS_CURRENT BOOLEAN DEFAULT TRUE,

    
    INGESTION_TS TIMESTAMP_NTZ  DEFAULT TO_TIMESTAMP_NTZ(CURRENT_TIMESTAMP)
    
);

// CREATE PROCEDURE:

CREATE OR REPLACE PROCEDURE PROC_PAYMENTS_STAGING()
RETURNS VARCHAR
LANGUAGE SQL
AS
$$
BEGIN

    CREATE OR REPLACE TEMPORARY TABLE TEMP_PAYMENTS_STAGING_STREAM
    AS
    SELECT * FROM IDENTIFIER($DB_NAME).IDENTIFIER($Sh_raw).PAYMENT_RAW_STREAM;

   UPDATE PAYMENTS_STAGING  T
   SET T.IS_CURRENT = FALSE, 
       T.EFFECTIVE_END_DATE = TO_TIMESTAMP_NTZ(CURRENT_TIMESTAMP)
   FROM TEMP_PAYMENTS_STAGING_STREAM  S 
   WHERE 
    T.payment_id = S.payment_id
    AND T.IS_CURRENT = TRUE
    AND
    (
        T.user_id <> S.user_id
        or T.amount <> S.amount
        or T.currency <> S.currency
        or T.payment_ts <> S.payment_ts
       
    );

    INSERT INTO PAYMENTS_STAGING (payment_id,user_id,amount,currency,payment_ts,file_name,file_row_number,
     IS_CURRENT, INGESTION_TS
    )
    SELECT 
        PAYMENT_ID,USER_ID,AMOUNT,CURRENCY,PAYMENT_TS,FILE_NAME,FILE_ROW_NUMBER, TRUE, TO_TIMESTAMP_NTZ(CURRENT_TIMESTAMP)
        FROM TEMP_PAYMENTS_STAGING_STREAM as S
        WHERE NOT EXISTS
        (
            SELECT 1 FROM PAYMENTS_STAGING as T
            WHERE T.PAYMENT_ID = S.PAYMENT_ID
            AND T.USER_ID = S.USER_ID
            AND T.AMOUNT = S.AMOUNT
            AND T.CURRENCY = S.CURRENCY
            AND T.PAYMENT_TS  = S.PAYMENT_TS
        );

    Return 'Success';
    END;
    $$;

// TASK:

CREATE OR REPLACE TASK TASK_RUN
WAREHOUSE = 'COMPUTE_WH'
SCHEDULE = 'USING CRON * * * * * UTC'
AS
CALL PROC_PAYMENTS_STAGING();

--ALTER TASK TASK_RUN SUSPEND; 
ALTER TASK TASK_RUN RESUME;  


/* Transformation */

SHOW PARAMETERS LIKE 'Timezone';

CREATE OR REPLACE VIEW PAYMENTS_STAGING_CLEAN
AS
SELECT 
    PAYMENT_ID,
    USER_ID,
    COALESCE(AMOUNT,0) AS AMOUNT,
    UPPER(CURRENCY) AS CURRENCY,
    CONVERT_TIMEZONE('America/Los_Angeles','Asia/Kolkata',PAYMENT_TS) as PAYMENT_TS_INDIA,
    FILE_NAME,
    FILE_ROW_NUMBER,
    CONVERT_TIMEZONE('America/Los_Angeles','Asia/Kolkata',EFFECTIVE_START_DATE) as EFFECTIVE_START_DATE_INDIA,
    CONVERT_TIMEZONE('America/Los_Angeles','Asia/Kolkata',EFFECTIVE_END_DATE) as EFFECTIVE_END_DATE_INDIA,
    IS_CURRENT,
    CONVERT_TIMEZONE('America/Los_Angeles','Asia/Kolkata',INGESTION_TS) as INGESTION_TS_INDIA
FROM PAYMENTS_STAGING
WHERE IS_CURRENT = TRUE
ORDER BY PAYMENT_ID ASC;
-- ## okay!
select * from table_2; -- dummy
Select * from table_2; -- dummy
